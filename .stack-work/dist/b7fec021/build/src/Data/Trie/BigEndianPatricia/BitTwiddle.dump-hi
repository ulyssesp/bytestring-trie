
==================== FINAL INTERFACE ====================
2018-07-20 18:06:43.0787179 UTC

interface bytestring-trie-0.3.0.3-HLFcIfm9b5G6WckdLkDVsX:Data.Trie.BigEndianPatricia.BitTwiddle 8001
  interface hash: c86a0f3e8401527bca87f0f248256caf
  ABI hash: 3ea1914db60aded0f26d319a23805c2b
  export-list hash: 6840dd155f43ad2f487af4b51ee3b319
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 755759eb11830ecdc44fa8e7cba4109b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Trie.BigEndianPatricia.BitTwiddle.branchMask
  Data.Trie.BigEndianPatricia.BitTwiddle.elemToNat
  Data.Trie.BigEndianPatricia.BitTwiddle.mask
  Data.Trie.BigEndianPatricia.BitTwiddle.nomatch
  Data.Trie.BigEndianPatricia.BitTwiddle.shorter
  Data.Trie.BigEndianPatricia.BitTwiddle.zero
  Data.Trie.BigEndianPatricia.BitTwiddle.Mask
  Data.Trie.BigEndianPatricia.BitTwiddle.Prefix
module dependencies: Data.Trie.ByteStringInternal
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Exts 8dde1ef8f2283d1c13b06a4e51aded72
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  Data.Trie.ByteStringInternal bf2bb815b22e2d3f05bd812f82c519b8
  exports: d460a1523e9dff7fa14b4e8b29362579
  ByteStringElem ff1646aaf324aacc05edeb026668a023
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
addDependentFile "C:\Users\ulyssesp\AppData\Local\Programs\stack\x86_64-windows\ghc-8.0.1\lib\include\ghcversion.h"
addDependentFile ".stack-work\dist\b7fec021\build\autogen\cabal_macros.h"
3902ffcd45b0ece67f7df25cda969056
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Trie.BigEndianPatricia.BitTwiddle.$trModule2
                   Data.Trie.BigEndianPatricia.BitTwiddle.$trModule1) -}
f57ac869f1bdd6662e972c51fbc223cd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Trie.BigEndianPatricia.BitTwiddle"#) -}
9c5539f7ad9310609fd9d9e44d0fdb80
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "bytestring-trie-0.3.0.3-HLFcIfm9b5G6WckdLkDVsX"#) -}
f4c9b5d1845eb8a9a3b7543e4e251421
  type KeyElem = Data.Trie.ByteStringInternal.ByteStringElem
8842595f2fafc2054fef6fc85a3c5b09
  type Mask = Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem
4a2e8b98a9994ac472a7e5fa81bbce4a
  type Prefix = Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem
64438c3c134bbb43d0e3dcdc021a5dce
  branchMask ::
    Data.Trie.BigEndianPatricia.BitTwiddle.Prefix
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Prefix
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Mask
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (p1 :: Data.Trie.BigEndianPatricia.BitTwiddle.Prefix)
                   (p2 :: Data.Trie.BigEndianPatricia.BitTwiddle.Prefix) ->
                 case p1 of wild { GHC.Word.W8# x# ->
                 case p2 of wild1 { GHC.Word.W8# x#1 ->
                 case Data.Bits.$fBitsWord_$cxor
                        (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#))
                        (GHC.Base.id
                           @ GHC.Types.Word
                           (GHC.Types.W# x#1)) of wild2 { GHC.Types.W# x ->
                 case GHC.Base.shiftRL# x 1# of wild3 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild2
                        (GHC.Types.W# wild3) of wild4 { GHC.Types.W# x1 ->
                 case GHC.Base.shiftRL# x1 2# of wild5 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild4
                        (GHC.Types.W# wild5) of wild6 { GHC.Types.W# x2 ->
                 case GHC.Base.shiftRL# x2 4# of wild7 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild6
                        (GHC.Types.W# wild7) of wild8 { GHC.Types.W# x3 ->
                 case GHC.Base.shiftRL# x3 8# of wild9 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild8
                        (GHC.Types.W# wild9) of wild10 { GHC.Types.W# x4 ->
                 case GHC.Base.shiftRL# x4 16# of wild11 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild10
                        (GHC.Types.W# wild11) of wild12 { GHC.Types.W# x5 ->
                 case GHC.Base.shiftRL# x5 32# of wild13 { DEFAULT ->
                 case Data.Bits.$fBitsWord_$c.|.
                        wild12
                        (GHC.Types.W# wild13) of wild14 { GHC.Types.W# x6 ->
                 case GHC.Base.shiftRL# x6 1# of wild15 { DEFAULT ->
                 case GHC.Base.id
                        @ GHC.Types.Word
                        (Data.Bits.$fBitsWord_$cxor
                           wild14
                           (GHC.Types.W# wild15)) of wild16 { GHC.Types.W# x#2 ->
                 GHC.Word.W8#
                   (GHC.Prim.narrow8Word# x#2) } } } } } } } } } } } } } } } } }) -}
97d401b91229cd9f50294434fe3ee0b5
  elemToNat ::
    Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem -> GHC.Types.Word
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (ds :: GHC.Word.Word8) ->
                 case ds of wild { GHC.Word.W8# x# ->
                 GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#) }) -}
44486fe2c05b5a747e13c1aebfef1123
  mask ::
    Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Mask
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Prefix
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (i :: Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem)
                   (m :: Data.Trie.BigEndianPatricia.BitTwiddle.Mask) ->
                 let {
                   m1 :: GHC.Types.Word
                   = case m of wild { GHC.Word.W8# x# ->
                     GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#) }
                 } in
                 case i of wild { GHC.Word.W8# x# ->
                 case GHC.Base.id
                        @ GHC.Types.Word
                        (Data.Bits.$fBitsWord_$c.&.
                           (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#))
                           (Data.Bits.$fBitsWord_$cxor
                              (Data.Bits.$fBitsWord_$ccomplement
                                 (GHC.Num.$fNumWord_$c- m1 (GHC.Types.W# 1##)))
                              m1)) of wild1 { GHC.Types.W# x#1 ->
                 GHC.Word.W8# (GHC.Prim.narrow8Word# x#1) } }) -}
9c9efba126bf8a6cdcf379e341e38621
  nomatch ::
    Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Prefix
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Mask
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem)
                   (p :: Data.Trie.BigEndianPatricia.BitTwiddle.Prefix)
                   (m :: Data.Trie.BigEndianPatricia.BitTwiddle.Mask) ->
                 let {
                   m1 :: GHC.Types.Word
                   = case m of wild { GHC.Word.W8# x# ->
                     GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#) }
                 } in
                 case i of wild { GHC.Word.W8# x# ->
                 case GHC.Base.id
                        @ GHC.Types.Word
                        (Data.Bits.$fBitsWord_$c.&.
                           (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#))
                           (Data.Bits.$fBitsWord_$cxor
                              (Data.Bits.$fBitsWord_$ccomplement
                                 (GHC.Num.$fNumWord_$c- m1 (GHC.Types.W# 1##)))
                              m1)) of wild1 { GHC.Types.W# x#1 ->
                 GHC.Word.neWord8
                   (GHC.Word.W8# (GHC.Prim.narrow8Word# x#1))
                   p } }) -}
57981be8f64015f96d5349f1e56dbdd2
  shorter ::
    Data.Trie.BigEndianPatricia.BitTwiddle.Mask
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Mask -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (m1 :: Data.Trie.BigEndianPatricia.BitTwiddle.Mask)
                   (m2 :: Data.Trie.BigEndianPatricia.BitTwiddle.Mask) ->
                 case m1 of wild { GHC.Word.W8# x# ->
                 case m2 of wild1 { GHC.Word.W8# x#1 ->
                 GHC.Classes.gtWord
                   (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#))
                   (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#1)) } }) -}
bef20c6a2bebea335cd5221dd3967ad7
  zero ::
    Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem
    -> Data.Trie.BigEndianPatricia.BitTwiddle.Mask -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (i :: Data.Trie.BigEndianPatricia.BitTwiddle.KeyElem)
                   (m :: Data.Trie.BigEndianPatricia.BitTwiddle.Mask) ->
                 case i of wild { GHC.Word.W8# x# ->
                 case m of wild1 { GHC.Word.W8# x#1 ->
                 GHC.Classes.eqWord
                   (Data.Bits.$fBitsWord_$c.&.
                      (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#))
                      (GHC.Base.id @ GHC.Types.Word (GHC.Types.W# x#1)))
                   (GHC.Types.W# 0##) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

